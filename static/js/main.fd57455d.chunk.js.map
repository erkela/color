{"version":3,"sources":["utils/utils.js","ValueHSV.js","utils/colors.js","Selector.js","Color.js","utils/script.js","test.js","data/head.js","Frame.js","WrapperTextEditor.js","App.js","serviceWorker.js","index.js"],"names":["gl","program","colorsUniformLocation","valueUniformLocation","vertexIdLoc","numVertsLoc","resolutionLoc","numVerts","idBuffer","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","deleteShader","drawChroma","value","viewport","canvas","width","height","clearColor","clear","COLOR_BUFFER_BIT","useProgram","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","FLOAT","vertexAttribPointer","uniform1f","uniform2f","uniform4f","drawArrays","TRIANGLES","ValueHSV","props","state","dragX","isDragging","ref","React","createRef","ValueRef","onDragStart","bind","onDragEnd","e","this","current","ctx","getContext","region","Path2D","arc","Math","PI","clip","fillStyle","fillRect","element","document","getElementsByClassName","style","cursor","dataTransfer","setDragImage","setData","ondragover","event","window","pageX","dragY","pageY","setState","console","log","className","draggable","onDrag","getBoundingClientRect","onTouchStart","onTouchMove","onTouchEnd","Component","hsvToRgb","hsv","h","s","v","c","hp","x","abs","m","rgb","r","g","b","checkPos","pos","result","Selector","left","top","deg","X","touches","offsetLeft","Y","offsetTop","Xt","Yt","sqrt","pow","atan2","sin","cos","color","backgroundColor","Color","boundingRect","position","handleResize","refSel","mask","addEventListener","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","deleteProgram","getAttribLocation","getUniformLocation","vertexIds","Float32Array","forEach","i","createBuffer","bufferData","STATIC_DRAW","initCanvas","removeEventListener","createElement","attributes","meta","entries","dataStructure","Map","Array","Object","extractEntries","key","setAttribute","getGeneratedPageURL","URL","html","css","js","getBlobURL","code","blob","Blob","createObjectURL","Frame","frame","src","url","script","appendChild","createTextNode","windowFrame","body","frameBorder","onClick","WrapperTextEditor","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd57455d.chunk.js","sourcesContent":["const createShader = (gl, type, source) => {\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {\n      return shader;\n    }\n   \n    gl.deleteShader(shader);\n  }\n\nconst createProgram=(gl, vertexShader, fragmentShader) => {\n    var program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {\n      return program;\n    }\n   \n    gl.deleteProgram(program);\n  }\n\nconst resize = (gl) => {\n    var realToCSSPixels = window.devicePixelRatio;\n  \n    // Lookup the size the browser is displaying the canvas in CSS pixels\n    // and compute a size needed to make our drawingbuffer match it in\n    // device pixels.\n    var displayWidth  = Math.floor(gl.canvas.clientWidth  * realToCSSPixels);\n    var displayHeight = Math.floor(gl.canvas.clientHeight * realToCSSPixels);\n  \n    // Check if the canvas is not the same size.\n    if (gl.canvas.width  !== displayWidth ||\n        gl.canvas.height !== displayHeight) {\n  \n      // Make the canvas the same size\n      gl.canvas.width  = displayWidth;\n      gl.canvas.height = displayHeight;\n    }\n  }\n\n\n\n\n\nlet gl,program,positionAttributeLocation,resolutionUniformLocation,colorsUniformLocation,valueUniformLocation,positionBuffer,vertexIdLoc,numVertsLoc,resolutionLoc;\nlet numVerts,idBuffer;\n\n\n\n\nconst initCanvas = (canvas) =>{\ngl = canvas.getContext(\"webgl\");\nif(!gl){\n    console.log(\"Webgl n'est pas supporté\");\n}\ncanvas.width = 600;\ncanvas.height = 600;\n\nconst vertexShaderSource=`\nattribute float vertexId;\nuniform float numVerts;\nuniform vec2 resolution;\n\n#define PI radians(180.0)\n\nvoid main() {\n  float numSlices = 1024.0;\n  float sliceId = floor(vertexId / 3.0);\n  float triVertexId = mod(vertexId, 3.0);\n  float edge = triVertexId + sliceId;\n  float angleU = edge / numSlices;  // 0.0 to 1.0\n  float angle = angleU * PI * 2.0;\n  float radius = step(triVertexId, 1.5);\n  vec2 pos = vec2(cos(angle), sin(angle)) * radius;\n\n  float aspect = resolution.y / resolution.x;\n  vec2 scale = vec2(aspect, 1);\n  \n  gl_Position = vec4(pos * scale, 0, 1);\n}\n`;\n\nconst fragmentShaderSource = `\n// fragment shaders don't have a default precision so we need\n// to pick one. mediump is a good default\nprecision mediump float;\nuniform vec4 u_colors;\nuniform float u_value;\nvarying vec2 v_position;\nfloat center = 300.0;\nfloat r = 300.0;\nfloat pi = 3.141592;\nfloat conv = pi/180.0;\n\nvec3 hsv2rgb( in vec3 hsl )\n{\n    float c = hsl.y*hsl.z;\n    float hp = hsl.x/60.0;\n    float x = c*abs(1.0-abs(mod(hp,2.0)-1.0));\n    vec3 rgb;\n    vec3 rgbp;\n    if(hp>=0.0 && hp <= 1.0)\n    {\n        rgbp = vec3(c,x,0.0);\n    } else if(hp>1.0 && hp <= 2.0){\n        rgbp = vec3(x,c,0.0);\n    } else if(hp>2.0 && hp <= 3.0){\n        rgbp = vec3(0.0,c,x);\n    } else if(hp>3.0 && hp <= 4.0){\n        rgbp = vec3(0.0,x,c);\n    } else if(hp>4.0 && hp <= 5.0){\n        rgbp = vec3(x,0.0,c);\n    } else if(hp>5.0 && hp <= 6.0){\n        rgbp = vec3(c,0.0,x);\n    }\n\n    float m = hsl.z - c;\n    rgb = vec3(rgbp.x+m,rgbp.y+m,rgbp.z+m);\n\n    return rgb;\n}\n\nvec3 hsl2rgb( in vec3 hsl )\n{\n    float c = (1.0-abs(2.0*hsl.z-1.0))*hsl.y;\n    float hp = hsl.x/60.0;\n    float x = c*abs(1.0-abs(mod(hp,2.0)-1.0));\n    vec3 rgb;\n    vec3 rgbp;\n    if(hp>=0.0 && hp <= 1.0)\n    {\n        rgbp = vec3(c,x,0.0);\n    } else if(hp>=1.0 && hp <= 2.0){\n        rgbp = vec3(x,c,0.0);\n    } else if(hp>=2.0 && hp <= 3.0){\n        rgbp = vec3(0.0,c,x);\n    } else if(hp>=3.0 && hp <= 4.0){\n        rgbp = vec3(0.0,x,c);\n    } else if(hp>=4.0 && hp <= 5.0){\n        rgbp = vec3(x,0.0,c);\n    } else if(hp>=5.0 && hp <= 6.0){\n        rgbp = vec3(c,0.0,x);\n    }\n\n    float m = hsl.z - c/2.0;\n    rgb = vec3(rgbp.x+m,rgbp.y+m,rgbp.z+m);\n\n    return rgb;\n}\n\nfloat atan2 ( in vec2 coord ) {\n    float rad = 0.0;\n    float x = coord.x;\n    float y = coord.y;\n\n    if(y>0.0){\n        rad = atan(y,x);\n    } else {\n        rad = pi*2.0+atan(y,x);\n    }\n\n    if (x == 0.0){\n        if(y > 0.0){\n            rad = 0.0;\n        } else {\n            rad=(-pi/2.0);\n        }\n    }\n    \n    return rad;\n}\n\nvoid main() {\n    // gl_FragCoord respresent the coord of the pixel\n    float x = (gl_FragCoord.x-center)/r;\n    float y = (gl_FragCoord.y-center)/r;\n    float deg =degrees(atan2(vec2(x,y)));\n    float rs = sqrt(pow(x,2.0)+pow(y,2.0));\n    vec4 color;\n    if(rs>r){\n        color=vec4(0.0,0.0,0.0,0.0);\n    }else{\n        color = vec4(hsv2rgb(vec3(deg,rs,u_value)),1);\n    }\n    gl_FragColor = color;\n}`\n\nlet vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\nlet fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n\nprogram = createProgram(gl, vertexShader, fragmentShader);\n\nvertexIdLoc = gl.getAttribLocation(program, 'vertexId');\nnumVertsLoc = gl.getUniformLocation(program, 'numVerts');\nresolutionLoc = gl.getUniformLocation(program, 'resolution');\n\ncolorsUniformLocation = gl.getUniformLocation(program, \"u_colors\");\nvalueUniformLocation = gl.getUniformLocation(program, \"u_value\");\n\nnumVerts = 1024 * 3;\nconst vertexIds = new Float32Array(numVerts);\nvertexIds.forEach((v, i) => {\n  vertexIds[i] = i;\n});\n\nidBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, idBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, vertexIds, gl.STATIC_DRAW);\n\n//resize(gl);\n\n\n}\n\n\n\nconst drawChroma=(value)=>{\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // Clear the canvas\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    // Tell it to use our program (pair of shaders)\n    gl.useProgram(program);\n\n    {\n        // Turn on the attribute\n        gl.enableVertexAttribArray(vertexIdLoc);\n    \n        // Bind the id buffer.\n        gl.bindBuffer(gl.ARRAY_BUFFER, idBuffer);\n    \n        // Tell the attribute how to get data out of idBuffer (ARRAY_BUFFER)\n        const size = 1;          // 1 components per iteration\n        const type = gl.FLOAT;   // the data is 32bit floats\n        const normalize = false; // don't normalize the data\n        const stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\n        const offset = 0;        // start at the beginning of the buffer\n        gl.vertexAttribPointer(\n            vertexIdLoc, size, type, normalize, stride, offset);\n      }\n    \n      // tell the shader the number of verts\n      gl.uniform1f(numVertsLoc, numVerts);\n      // tell the shader the resolution\n      gl.uniform2f(resolutionLoc, gl.canvas.width, gl.canvas.height);\n        gl.uniform4f(colorsUniformLocation, 0, 0, 1, 1);\n        gl.uniform1f(valueUniformLocation, value);\n    \n      const offset = 0;\n      gl.drawArrays(gl.TRIANGLES, offset, numVerts);\n \n}\n\n  export {drawChroma,initCanvas};","import React, { Component } from 'react';\n\nclass ValueHSV extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            dragX:0,\n            isDragging:false\n        }\n\n        this.ref=React.createRef();\n        this.ValueRef=React.createRef();\n\n        this.onDragStart=this.onDragStart.bind(this);\n        this.onDragEnd=this.onDragEnd.bind(this);\n    }\n    onDragStart(e){\n        const canvas = this.ref.current;\n        const ctx = canvas.getContext(\"2d\");\n\n        canvas.width = 48;\n        canvas.height = 48;\n\n        let region = new Path2D();\n        region.arc(canvas.width/2,canvas.height/2,24,0,Math.PI*2);\n        region.arc(canvas.width/2,canvas.height/2,12,0,Math.PI*2);\n\n        ctx.clip(region,\"evenodd\");\n\n        ctx.fillStyle=\"#FFFFFF\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        const element = document.getElementsByClassName(\"App\");\n        const rond = document.getElementsByClassName(\"ValueHSV\");\n        rond[0].style.cursor=\"none\";\n        element[0].style.cursor=\"none\";\n        e.dataTransfer.setDragImage(canvas, 0, 0);\n        e.dataTransfer.setData(\"text/plain\", \"Text to drag\");\n        document.ondragover = (event) => {\n            event = event || window.event;\n            const dragX = event.pageX;\n            const dragY = event.pageY;\n            this.setState({dragX,dragY});\n        }\n    }\n\n    onDragEnd(){\n        const element = document.getElementsByClassName(\"App\");\n        const rond = document.getElementsByClassName(\"ValueHSV\");\n        rond[0].style.cursor=\"default\";\n        element[0].style.cursor=\"default\";\n        console.log(element[0].style.cursor)\n    }\n\n    render() {\n        return (\n            <div className=\"ValueHSV\" ref={this.ValueRef}>\n                <span\n                    draggable=\"true\"\n\n                    onDragStart={(e)=>this.onDragStart(e)}\n                    onDrag={\n                        (e)=>{\n                            this.props.onDrag(e,this.ValueRef.current.getBoundingClientRect(),this.state.dragX);\n                        }\n                    }\n                    onDragEnd={this.onDragEnd}\n\n                    onTouchStart={()=>{\n                        this.setState({isDragging:true});\n                    }}\n\n                    onTouchMove={\n                        (e)=>{\n                            this.props.onTouchMove(e,this.ValueRef.current.getBoundingClientRect())\n                        }\n                    }\n\n                    onTouchEnd={()=>{\n                        this.setState({isDragging:false});\n                    }}\n                style={\n                    this.props.style\n                }/>\n\n                <canvas\n                    className=\"hide\"\n\n                    ref={\n                        this.ref\n                    }\n                />\n            </div>\n        );\n    }\n}\n\nexport default ValueHSV;","const getRandomColor = function() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\nconst hsvToRgb = function (hsv){\n    const h=hsv.h,s=hsv.s,v=hsv.v;\n    const c = v*s;\n    const hp = h/60;\n    const x = c * (1-Math.abs(hp%2-1));\n    const m = v-c;\n\n    let rgb = {r:0,g:0,b:0};\n\n    if(hp >= 0 && hp <= 1)\n    {\n        rgb.r = c;\n        rgb.g = x;\n    } else if(hp>1 && hp <= 2){\n        rgb.r=x;\n        rgb.g=c;\n    } else if(hp>2 && hp <= 3){\n        rgb.g = c;\n        rgb.b = x;\n    } else if(hp>3 && hp <= 4){\n        rgb.g = x;\n        rgb.b = c;\n    } else if(hp>4 && hp <= 5){\n        rgb.r=x;\n        rgb.b=c;\n    } else if(hp>5 && hp <= 6){\n        rgb.r=c;\n        rgb.b=x;\n    }\n\n    rgb.r+=m;\n    rgb.g+=m;\n    rgb.b+=m;\n\n    return rgb;\n}\n\nexport {hsvToRgb};","import React, { Component } from 'react';\nimport {hsvToRgb} from './utils/colors';\nfunction checkPos(pos){\n    let result=pos;\n    if(pos<0){\n        result=0;\n    } else if(pos>100){\n        result=100;\n    }\n    return result;\n}\n\n\n\n\nclass Selector extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            left:100,\n            top:50,\n            h:0,\n            s:1,\n            isDragging:false,\n            dragX:0,\n            dragY:0\n        }\n        this.ref=React.createRef();\n        this.onTouchStart=this.onTouchStart.bind(this);\n        this.onDragStart=this.onDragStart.bind(this);\n        this.onDrag=this.onDrag.bind(this);\n        this.onDragEnd=this.onDragEnd.bind(this);\n        this.onTouchEnd=this.onTouchEnd.bind(this);\n        this.onTouchMove=this.onTouchMove.bind(this);\n    }\n\n    onDragStart(e){\n        const canvas = this.ref.current;\n        const ctx = canvas.getContext(\"2d\");\n\n        canvas.width = 48;\n        canvas.height = 48;\n\n        let region = new Path2D();\n        region.arc(canvas.width/2,canvas.height/2,24,0,Math.PI*2);\n        region.arc(canvas.width/2,canvas.height/2,12,0,Math.PI*2);\n\n        ctx.clip(region,\"evenodd\");\n\n        ctx.fillStyle=\"#FFFFFF\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        const element = document.getElementsByClassName(\"App\");\n        const rond = document.getElementsByClassName(\"rond\");\n        rond[0].style.cursor=\"none\";\n        element[0].style.cursor=\"none\";\n        e.dataTransfer.setDragImage(canvas, 0, 0);\n        e.dataTransfer.setData(\"text/plain\", \"Text to drag\");\n        document.ondragover = (event) => {\n            event = event || window.event;\n            const dragX = event.pageX;\n            const dragY = event.pageY;\n            this.setState({dragX,dragY});\n        }\n    }\n\n    onTouchStart(e){\n        this.setState({isDragging:true});\n    }\n\n    onTouchMove(e){\n        let X= e.touches[0].pageX-this.props.offsetLeft;\n        let Y = e.touches[0].pageY-this.props.offsetTop;\n\n        let left = checkPos(X/300*100);\n        let top = checkPos(Y/300*100);\n\n        let Xt = (left-50)/50;\n        let Yt = (top-50)/50;\n\n        let deg;\n\n        const r = Math.sqrt(Math.pow(left-50,2)+Math.pow(top-50,2));\n\n        if(Yt>=0){\n            deg=Math.atan2(Yt,Xt);\n        }else {\n            deg=2*Math.PI+Math.atan2(Yt,Xt);\n        }\n\n        if(r>=50){\n            top=50+50*Math.sin(deg);\n            left=50+50*Math.cos(deg);\n        }\n\n        let color = hsvToRgb({h:360-deg*180/Math.PI,s:r/50,v:this.props.value});\n\n        this.setState({\n            top:top,\n            left:left,\n            h:360-deg*180/Math.PI,\n            s:r/50\n        });\n    }\n\n    onDrag(e){\n        if(this.state.dragX !== 0 && this.state.dragY !== 0){\n            let X= this.state.dragX-this.props.offsetLeft;\n            let Y = this.state.dragY-this.props.offsetTop;\n\n            let left = checkPos(X/300*100);\n            let top = checkPos(Y/300*100);\n\n            let Xt = (left-50)/50;\n            let Yt = (top-50)/50;\n\n            let deg;\n\n            const r =Math.sqrt(Math.pow(left-50,2)+Math.pow(top-50,2));\n\n            if(Yt>=0){\n                deg=Math.atan2(Yt,Xt);\n            }else {\n                deg=2*Math.PI+Math.atan2(Yt,Xt);\n            }\n\n            if(r>=50){\n                top=50+50*Math.sin(deg);\n                left=50+50*Math.cos(deg);\n            }\n\n            let color = hsvToRgb({h:360-deg*180/Math.PI,s:r/50,v:this.props.value});\n\n            this.setState({\n                top:top,\n                left:left,\n                h:360-deg*180/Math.PI,\n                s:r/50\n            });\n        }\n    }\n\n    onDragEnd(e){\n        const element = document.getElementsByClassName(\"App\");\n        const rond = document.getElementsByClassName(\"rond\");\n        rond[0].style.cursor=\"default\";\n        element[0].style.cursor=\"default\";\n    }\n\n    onTouchEnd(e){\n        this.setState({isDragging:false});\n    }\n\n    render() {\n        const color = hsvToRgb({h:this.state.h,s:this.state.s,v:this.props.value});\n        return (\n            <div\n            draggable\n\n            style={{\n                top:this.state.top-5+\"%\",\n                left:this.state.left-5+\"%\",\n                backgroundColor:`rgb(${color.r*255},${color.g*255},${color.b*255})`\n            }}\n\n            onDragStart={(e)=>\n                this.onDragStart(e)\n            }\n            onDrag={(e)=>\n                this.onDrag(e)\n            }\n\n            onDragEnd={(e)=>\n                this.onDragEnd(e)\n            }\n\n            onTouchStart={(e)=>\n                this.onTouchStart(e)\n            }\n\n            onTouchMove={(e)=>\n                this.onTouchMove(e)\n            }\n\n            onTouchEnd={\n                this.onTouchEnd\n            }\n\n            className=\"rond\">\n                <canvas\n                    className=\"hide\"\n\n                    ref={\n                        this.ref\n                    }\n                />\n            </div>\n        );\n    }\n}\n\nexport default Selector;","import React, { Component } from 'react';\nimport {drawChroma,initCanvas} from './utils/utils';\nimport ValueHSV from './ValueHSV';\nimport Selector from './Selector';\n\nclass Color extends Component {\n    constructor(props){\n        super(props);\n        this.ref=React.createRef();\n        this.mask=React.createRef();\n        this.refSel=React.createRef();\n        this.state={\n            offsetLeft:null,\n            offsetTop:null,\n            style:{\n                left:`calc(100% - 15px)`,\n                backgroundColor:\"rgb(255,255,255)\",\n            },\n            dragX:1,\n            value:1\n        }\n\n        this.onDrag=this.onDrag.bind(this);\n    }\n    componentDidMount(){\n        const canvas = this.mask.current;\n        const offsetLeft=this.refSel.current.offsetLeft;\n        const offsetTop=this.refSel.current.offsetTop;\n\n        window.addEventListener('resize',this.handleResize);\n\n        initCanvas(canvas);\n        drawChroma(1);\n\n        this.setState({offsetTop,offsetLeft});\n\n    }\n\n    onDrag=(e,boundingRect,dragX)=>{\n        if(dragX !== 0 && boundingRect){\n            const offsetLeft=boundingRect.x;\n            const width = boundingRect.width;\n            let X = dragX-offsetLeft;\n            let position;\n            if(X>width){\n                position=1\n            } else if(X<0){\n                position=0;\n            } else {\n                position = X/width;\n            }\n\n            drawChroma(position);\n\n            this.setState({\n                value:position,\n                style:{\n                    left:`calc(${position*100}% - 15px)`,\n                    backgroundColor:`rgb(${position*255},${position*255},${position*255})`\n                }\n            });\n        }\n    }\n\n    onTouchMove=(e,boundingRect)=>{\n        let dragX= e.touches[0].pageX;\n        if(dragX !== 0 && boundingRect){\n            const offsetLeft=boundingRect.x;\n            const width = boundingRect.width;\n            let X = dragX-offsetLeft;\n            let position;\n            if(X>width){\n                position=1\n            } else if(X<0){\n                position=0;\n            } else {\n                position = X/width;\n            }\n\n            drawChroma(position);\n\n            this.setState({\n                value:position,\n                style:{\n                    left:`calc(${position*100}% - 15px)`,\n                    backgroundColor:`rgb(${position*255},${position*255},${position*255})`\n                }\n            });\n        }\n    }\n\n    componentWillMount(){\n        window.removeEventListener('resize',this.handleResize);\n    }\n\n    handleResize=()=>{\n        const offsetLeft=this.refSel.current.offsetLeft;\n        const offsetTop=this.refSel.current.offsetTop;\n\n        this.setState({offsetTop,offsetLeft});\n    }\n    render() {\n        return (\n            <div\n\n            ref={this.refSel}\n\n            className=\"wrapper\"\n            >\n                 <div className=\"canvas_wrapper\">\n                    <canvas className=\"mask\" ref={this.mask} />\n                </div>\n                <ValueHSV onDrag={this.onDrag} onTouchMove={this.onTouchMove} style={this.state.style}/>\n                <Selector value={this.state.value} offsetTop={this.state.offsetTop} offsetLeft={this.state.offsetLeft}/>\n            </div>\n        );\n    }\n}\n\nexport default Color;","const extractEntries = (dataStructure)=>{\n    let result;\n    if(dataStructure instanceof Map){\n        result = dataStructure.entries();\n    } else if (dataStructure instanceof Array){\n        \n    } else if(dataStructure instanceof Object){\n        result = Object.entries(dataStructure);\n    }\n    \n    return result;\n}\n\n\nconst createElement = (element,attributes)=>{\n    const meta = document.createElement(element);\n    if(attributes){\n        const entries = extractEntries(attributes);\n        for(let [key,value] of entries){\n            meta.setAttribute(key,value);\n        }\n    }\n    return meta;\n}\n\nexport {createElement};","const getGeneratedPageURL = ({ html, css, js }) => {\n    const getBlobURL = (code, type) => {\n      const blob = new Blob([code], { type })\n      return URL.createObjectURL(blob)\n    }\n  \n    const cssURL = getBlobURL(css, 'text/css')\n    const jsURL = getBlobURL(js, 'text/javascript')\n  \n    const source = `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\" />\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"theme-color\" content=\"#000000\" />\n        <meta\n          name=\"description\"\n          content=\"Web site created using create-react-app\"\n        />\n        <link rel=\"apple-touch-icon\" href=\"logo192.png\" />\n        <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n        <title>React App</title>\n        <script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\n        <script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\n        <script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n        <style>\n        body {\n          margin: 0;\n          font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n            \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n            sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n        \n        code {\n          font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n            monospace;\n        }\n        \n\n          .App {\n            cursor: default;\n            text-align: center;\n          }\n          \n          .App-logo {\n            height: 40vmin;\n          }\n          \n          .App-header {\n            background-color: red;\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            font-size: calc(10px + 2vmin);\n            color: white;\n          }\n        </style>\n      </head>\n      <body>\n        <noscript>You need to enable JavaScript to run this app.</noscript>\n        <div id=\"root\"></div>\n        <script type=\"text/babel\">\n        function App() {\n          return (\n            <div className=\"App\">\n              <header className=\"App-header\">\n                \n              </header>\n            </div>\n          );\n        }\n      </script>\n      <script type=\"text/babel\">\n        ReactDOM.render(<App />, document.getElementById('root'));\n      </script>\n      </body>\n    </html>\n    `\n  \n    return getBlobURL(source, 'text/html')\n  }\n  \n  const url = getGeneratedPageURL({\n    html: '<p>Hello, world!</p>',\n    css: 'p { color: blue; }',\n    js: 'console.log(\"hi\")'\n  })\n\n  export {getGeneratedPageURL};","const listTagHead = [\n    {\n        element:\"meta\",\n        attributes:\n        {\n            charset:\"utf-8\"\n        }\n    },\n    {\n        element:\"meta\",\n        attributes:\n        {\n            name:\"viewport\",\n            content:\"width=device-width, initial-scale=1\"\n        }\n    },\n    {\n        element:\"meta\",\n        attributes:\n        {\n            name:\"theme-color\",\n            content:\"#000000\"\n        }\n    },\n    {\n        element:\"meta\",\n        attributes:\n        {\n            name:\"description\",\n            content:\"Web view to render React Component\"\n        }\n    },\n    {\n        element:\"script\",\n        attributes:\n        {\n            type:\"application/javascript\",\n            src:new URL(\"https://unpkg.com/react@16/umd/react.development.js\")\n        }\n    },\n    {\n        element:\"script\",\n        attributes:\n        {\n            type:\"application/javascript\",\n            src:new URL(\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\")\n        }\n    },\n    {\n        element:\"script\",\n        attributes:\n        {\n            type:\"application/javascript\",\n            src:new URL(\"https://unpkg.com/@babel/standalone/babel.min.js\")\n        }\n    },\n]\n\nexport default listTagHead;","import React, { Component } from 'react';\nimport {createElement} from './utils/script';\nimport tag from \"./data/head\";\nimport {getGeneratedPageURL} from './test';\n\nlet windowFrame;\nclass Frame extends Component {\n    constructor(props){\n        super(props);\n        this.frame=React.createRef();\n        this.state= {\n            src:null\n        }\n    }\n\n    componentDidMount(){\n        /*\n        windowFrame = this.frame.current.contentWindow;\n        const head = windowFrame.document.getElementsByTagName(\"head\")[0];\n\n        tag.forEach((data)=>{\n            head.append(createElement(data.element,data.attributes));\n        })\n        */\n       const url = getGeneratedPageURL({\n        html: '<p>Hello, world!</p>',\n        css: 'body { background: blue; }',\n        js: 'console.log(\"hi\")'\n      })\n      this.setState({src:url});\n    }\n\n    onClick(){\n        const script = createElement(\"script\");\n        script.type = \"text/javascript\";\n        const code = \"document.body.style.backgroundColor = red;\";\n        script.appendChild(document.createTextNode(code));\n        windowFrame.document.body.appendChild(script);\n    }\n\n    render() {\n        return (\n            <div>\n                 <iframe src={this.state.src} frameBorder=\"1\" ref={this.frame}/>\n                 <div onClick={this.onClick}>click me !</div>\n            </div>\n        );\n    }\n}\n\nexport default Frame;","import React, { Component } from 'react';\nimport Frame from './Frame';\nclass WrapperTextEditor extends Component {\n    constructor(props){\n        super(props);\n\n    }\n    render() {\n        return (\n            <div>\n                <Frame/>\n            </div>\n        );\n    }\n}\n\nexport default WrapperTextEditor;","import React from 'react';\nimport './App.css';\nimport Color from './Color';\nimport WrapperTextEditor from './WrapperTextEditor';\nconsole.log(WrapperTextEditor);\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Color/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}